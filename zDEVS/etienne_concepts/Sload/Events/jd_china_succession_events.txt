namespace = JD

### Stuff that should probably be handled upon new dynasty for the emperor ###
#- new policy?
#- new status?
#- Western Protectorate ruler change?
#- Title (of China) name change
#- Policy change infrastructure (ended up being another file)
#- Handle tributaries
#- Handle grace values
#- Handle agreements? (Non-aggression pacts break)

#TEMPLATE STUFFS/Milla
####Test events for delayed event bouncing
#character_event = { #initial event fired (hidden)
#    id = JD.10001
#    desc = EVTDESC_JD_10001
#    picture = GFX_evt_crusaders
#    border = GFX_event_normal_frame_war
#    is_triggered_only = yes
#    offmap = allow #(MUST HAVE)
#
#    trigger = {
#
#    }
#
#    immediate = {
#    	set_character_flag = sent_event_01
#    }
#
#    option = {      
#        name = EVTOPTA_JD_10001
#        custom_tooltip = { text = EVTOPTA_JD_10001_TT }
#        character_event = { id = JD.10002 }
#    }
#}
#
#character_event = { #delayed event that sends actual event to whomever (hidden)
#    id = JD.10002
#    hide_window = yes
#    is_triggered_only = yes
#    offmap = allow #offmap = allow (MUST HAVE)
#    immediate = {
#    	any_playable_ruler = {
#    		character_event = { id = JD.10003 } #send a visible event (like NEWS!)
#    	}
#    	set_character_flag = sent_event_02
#    }
#}
#
#character_event = { # Actual important and visible event for player
#    id = JD.10003
#    desc = EVTDESC_JD_10005
#	picture = GFX_evt_crusaders
#	border = GFX_event_normal_frame_war
#
#    is_triggered_only = yes
#
#    option = {      
#        name = EVTOPTA_JD_10001
#        custom_tooltip = { text = EVTOPTA_JD_10001_TT }
#        set_character_flag = received_event_03
#        #character_event = { id = JD.10002 days = 15 } #potential follow-up
#    }
#}

# on_offmap_ruler_changed: An offmap power changes its ruler. Triggers for the new ruler
# Root = New ruler
# From = Old ruler
# FromFrom = Offmap

#In case of dynasty change...  (fired from om_action: on_offmap_ruler_changed)
character_event = {
    id = JD.10005
    hide_window = yes

    has_dlc = "Jade Dragon"

    is_triggered_only = yes
    offmap = only #alternative would be "offmap = allow" (but that'd *include* them, not be *only* for them)

    trigger = {
        is_offmap_tag = offmap_thras
    	NOT = { dynasty = FROM }
    }

    immediate = {
        if = {
            limit = {
                NOT = {
                    any_player = {
                        dynasty = ROOT
                    }
                }
            }
            clr_offmap_flag = thras_invaded_player_dynasty
        }

    	# #Sack the current western governor or not...
    	# random_list = {
    		# 10 = {
    			# modifier = {
    			 	# factor = 10
			 		# OR = {
    			 		# AND = {
    			 			# culture = mongol
	    			 		# governor = {
	    			 			# NOT = { culture = mongol }
	    			 		# }
	    			 	# }
	    			 	# AND = {
    			 			# culture = jurchen
	    			 		# governor = {
	    			 			# NOT = { culture = jurchen }
	    			 		# }
	    			 	# }
			 		# }
    			# }
    			# modifier = {
    				# factor = 1.5
    				# has_status = thras_internal_war
    			# }
    			# modifier = {
    				# factor = 0.5
    				# has_status = thras_stable
    			# }
    		# }
    		# 10 = {
    			# trigger = {
					# offmap_thras = {
						# NOT = { has_offmap_tmp_flag = thras_invaded_player_dynasty }
					# }
				# }
			# }
    	# }

    	# #Pick a new state (Emperor dynasty) name...
    	# if = {
    		# limit = { NOT = { has_offmap_flag = rename_override } }
		# }

        #Break peace deal
        any_playable_ruler = {
            limit = {
				has_character_modifier = peace_deal_with_thras
				OR = {
					ai = yes
					NOT = { has_offmap_news_enabled = FROMFROM }
					NOT = { is_within_diplo_range = ROOT }
				}
			}
            remove_character_modifier = peace_deal_with_thras
        }

        #Reset Cooldowns
        any_playable_ruler = {
            limit = {
                OR = {
                    has_character_modifier = thras_force_open_cooldown
                    has_character_modifier = angered_thras_modifier
					has_character_modifier = thras_raid_grace_cd
                }
            }
            remove_character_modifier = thras_force_open_cooldown
            remove_character_modifier = angered_thras_modifier
			remove_character_modifier = thras_raid_grace_cd
        }

    	# #Handle tributaries...
        # governor = {
            # any_tributary = {
                # limit = { is_tributary = { type = offmap } }
                # remove_tributary = PREV
                # set_character_flag = was_tributary_of_thras #for new dynasty notification event
            # }
        # }
    }
}




# # on_startup event for dealing with old saves not having a proper name or government for the Chinese Empire... 
# character_event = {
    # id = JD.10006
    # is_triggered_only = yes

    # hide_window = yes

    # trigger = {
        # ai = no
        # offmap_thras = {
            # has_offmap_name = china_china
        # }
    # }

    # immediate = {
        # offmap_thras = {
            # governor = {
                # set_government_type = confucian_bureaucracy
            # }
            # set_government_type = confucian_bureaucracy
            # random_list = {
                # 10 = {  #pretty likely
                    # set_offmap_name = "song_china"
                # }
                # 5 = { #less likely
                    # set_offmap_name = "liang_china"
                # }
                # 5 = { #less likely
                    # modifier = { #even less likely to be picked early game
                        # factor = 0.1
                        # NOT = { year = 1200 }
                    # }
                    # set_offmap_name = "ming_china"
                # }
                # 5 = { #less likely
                    # set_offmap_name = "shu_china"
                # }
                # 5 = { #less likely
                    # set_offmap_name = "wu_china"
                # }
                # 5 = { #less likely
                    # set_offmap_name = "chu_china"
                # }
                # 5 = { #less likely
                    # set_offmap_name = "yue_china"
                # }
                # 3 = { #even less likely
                    # set_offmap_name = "yin_china"
                # }
                # 3 = { #even less likely
                    # set_offmap_name = "qi_china"
                # }
                # 3 = { #even less likely
                    # modifier = { #less likely to be picked early game
                        # factor = 0.1
                        # NOT = { year = 1200 }
                    # }
                    # set_offmap_name = "shun_china"
                # }
            # }
        # }
    # }
# }

character_event = {
	id = JD.31000
	hide_window = yes
	
	is_triggered_only = yes
	offmap = only
	
	immediate = {
		if = {
			limit = {
				FROMFROM = {
					is_offmap_tag = offmap_thras
				}
			}
            log = "-------------------------------------"
            log = "Thras Logging:"
			log = "Thrassian succession - New Culture: [Root.Culture.GetName]"
			log = "Thrassian succession - Old Culture: [From.Culture.GetName]"
			log = "Thrassian succession - New Religion: [Root.Religion.GetName]"
			log = "Thrassian succession - Old Religion: [From.Religion.GetName]"
			log = "Thrassian succession - New Dynasty: [Root.GetOnlyDynastyName]"
			log = "Thrassian succession - Old Dynasty: [From.GetOnlyDynastyName]"
            log = "-------------------------------------"
		}
#		if = {
#			limit = {
#				is_female = yes
#			}
#			change_variable = {
#				which = global_china_amount_of_female_rulers
#				value = 1
#			}
#		}
#		if = {
#			limit = {
#				NOT = { is_female = yes }
#			}
#			change_variable = {
#				which = global_china_amount_of_male_rulers
#				value = 1
#			}
#		}
#		if = {
#			limit = {
#				NOT = { dynasty = FROM }
#			}
#			change_variable = {
#				which = global_china_amount_of_dynastic_changes
#				value = 1
#			}
#		}
#		if = {
#			limit = {
#				culture = han
#				NOT = { culture = FROM }
#			}
#			change_variable = {
#				which = global_china_amount_of_culture_swaps_to_han
#				value = 1
#			}
#		}
#		if = {
#			limit = {
#				culture = jurchen
#				NOT = { culture = FROM }
#			}
#			change_variable = {
#				which = global_china_amount_of_culture_swaps_to_jurchen
#				value = 1
#			}
#		}
#		if = {
#			limit = {
#				culture = mongol
#				NOT = { culture = FROM }
#			}
#			change_variable = {
#				which = global_china_amount_of_culture_swaps_to_mongol
#				value = 1
#			}
#		}
#		if = {
#			limit = {
#				culture = khitan
#				NOT = { culture = FROM }
#			}
#			change_variable = {
#				which = global_china_amount_of_culture_swaps_to_khitan
#				value = 1
#			}
#		}
#		if = {
#			limit = {
#				culture = uyghur
#				NOT = { culture = FROM }
#			}
#			change_variable = {
#				which = global_china_amount_of_culture_swaps_to_uyghur
#				value = 1
#			}
#		}
#		if = {
#			limit = {
#				culture = kirghiz
#				NOT = { culture = FROM }
#			}
#			change_variable = {
#				which = global_china_amount_of_culture_swaps_to_kirghiz
#				value = 1
#			}
#		}
#		if = {
#			limit = {
#				NOR = {
#					culture = han
#					culture = jurchen
#					culture = mongol
#					culture = khitan
#					culture = uyghur
#					culture = kirghiz
#				}
#				NOT = { culture = FROM }
#			}
#			change_variable = {
#				which = global_china_amount_of_culture_swaps_to_something_else
#				value = 1
#			}
#		}
#		if = {
#			limit = {
#				religion = taoist
#				NOT = { religion = FROM }
#			}
#			change_variable = {
#				which = global_china_amount_of_religion_swaps_to_taoist
#				value = 1
#			}
#		}
#		if = {
#			limit = {
#				religion = tengri_pagan
#				NOT = { religion = FROM }
#			}
#			change_variable = {
#				which = global_china_amount_of_religion_swaps_to_tengri
#				value = 1
#			}
#		}
#		if = {
#			limit = {
#				NOR = {
#					religion = taoist
#					religion = tengri_pagan
#				}
#				NOT = { culture = FROM }
#			}
#			change_variable = {
#				which = global_china_amount_of_religion_swaps_to_something_else
#				value = 1
#			}
#		}
	}
}